// LSM303DLCH_accel_cal_result_test.ino


// Arduino Wire library is required if I2Cdev I2CDEV_ARDUINO_WIRE implementation
// is used in I2Cdev.h
#include <Wire.h>

// I2Cdev and LSM303DLHC must be installed as libraries, or else the .cpp/.h files
// for both classes must be in the include path of your project
#include <I2Cdev.h>
#include <LSM303DLHC.h>

// default address is 105
// specific I2C address may be passed here
LSM303DLHC accelMag;

int16_t ax, ay, az;
float axcal, aycal, azcal;


// These calibration values are generated by accelCal.m

float acc11 = 1.007441;
float acc12 = -0.002214;
float acc13 = 0.002661;
float acc10 = 210.452155;
float acc21 = 0.006953;
float acc22 = 0.993671;
float acc23 = 0.001837;
float acc20 = 216.580785;
float acc31 = -0.004203;
float acc32 = -0.001992;
float acc33 = 1.004737;
float acc30 = -1046.996387;

void setup() {
    // join I2C bus (I2Cdev library doesn't do this automatically)
    Wire.begin();

    // initialize serial communication
    // (38400 chosen because it works as well at 8MHz as it does at 16MHz, but
    // it's really up to you depending on your project)
    Serial.begin(115200);

    // initialize device
    Serial.println("Initializing I2C devices...");
    accelMag.initialize();

    // verify connection
    Serial.println("Testing device connections...");
    Serial.println(accelMag.testConnection() ? "LSM303DLHC connection successful" : "LSM303DLHC connection failed");

    // set scale to 2Gs
    accelMag.setAccelFullScale(2);

    // set accel data rate to 200hz
    accelMag.setAccelOutputDataRate(200);

    // high res output allows 12-bit vice 10-bit precision.
    accelMag.setAccelHighResOutputEnabled(true);

    // test scale
    Serial.print("Accel Scale: ");
    Serial.println(accelMag.getAccelFullScale());

    // test data rate
    Serial.print("Accel Output Data Rate: ");
    Serial.println(accelMag.getAccelOutputDataRate());


}

void loop() {
    // read raw angular velocity measurements from device
    accelMag.getAcceleration(&ax, &ay, &az);

    //calibrate:
    axcal = ax*acc11 + ay*acc12 + az*acc13 + acc10;
    aycal = ax*acc21 + ay*acc22 + az*acc23 + acc20;
    azcal = ax*acc31 + ay*acc32 + az*acc33 + acc30;

    Serial.print("Accelation:\t");
    Serial.print(axcal*0.000061035F,3); Serial.print("\t");
    Serial.print(aycal*0.000061035F,3); Serial.print("\t");
    Serial.print(azcal*0.000061035F,3); 
    Serial.print("\tUncal:\t");
    Serial.print(ax*0.000061035F,3); Serial.print("\t");
    Serial.print(ay*0.000061035F,3); Serial.print("\t");
    Serial.print(az*0.000061035F,3); 
    
    Serial.println();

    delay(1000);
}
